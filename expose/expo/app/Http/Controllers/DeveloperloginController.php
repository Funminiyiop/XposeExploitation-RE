<?php

namespace App\Http\Controllers;

use Session, DB, Mail, Validator;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Auth;
use App\ReportRobot\Robot;

class DeveloperloginController extends Controller
{
    protected $redirectTo = '/home';
    protected function doValidateLogin(Request $request)
    {
        return Validator::make($request->toArray(), [
            'email' => ['required', 'email'],
            'password' => ['required', 'string', 'min:8',],
        ]);
    }

    protected function doAttemptLogin(Request $request)
    {
        return $this->guard()->attempt(
            $this->takeCredentials($request), $request->has('remember')
        );
    }

    protected function takeCredentials(Request $request)
    {
        return $request->only('email', 'password');
    }

    public function fireLogin(Request $request)
    {
        $robot = new Robot;
        $credentials = $request->validate([
            'email' => ['required', 'email'],
            'password' => ['required'],
        ]);
        
        $userExist =  $robot->checkUserIfExist($credentials['email']); 
        if($userExist === 'No'){
            return back()->withErrors([
                'email' => 'The provided credentials do not match our records.',
            ])->onlyInput('email');
        }
        
        $checkRegButNotVerified =  $robot->checkUserIfVeried($credentials['email'])['verified']; 
        if($checkRegButNotVerified === 0) { 
            DB::beginTransaction();
            try
            {
                $mdata = [	
                    'name' => $checkRegButNotVerified =  $robot->checkUserIfVeried($credentials['email'])['name'],
                    'email' => $checkRegButNotVerified =  $robot->checkUserIfVeried($credentials['email'])['email'], 
                    'email_token' => Str::random(15),
                ];
                Mail::send('emails.verification', $mdata, function($message) use ($mdata){
                    $message->to($mdata['email']); 
                    $message->subject('Account Activation Request'); 
                });
                $updata = [	
                    'email_token' => $mdata['email_token'],
                ];
                $updateToken =  $robot->updateNewUserEmailToken($mdata['email'], $updata);
                Session::flash('message', 'You need to verify your account. A verification email was sent to you.');      	
                return redirect('/login');
            }
            catch(Exception $e)
            {
                DB::rollback(); 
                return back();
            }
                
        } 
        if (Auth::attempt($credentials)) {
            $request->session()->regenerate();
            return redirect()->intended('dashboard');
        }
 
        return back()->withErrors([
            'email' => 'The provided credentials do not match our records.',
        ])->onlyInput('email');

    }
}
