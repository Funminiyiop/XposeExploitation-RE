<?php namespace App\ReportRobot;

//use Mail;
use Session;
use Auth, DB;
use Validator;
use App\Models\User;
use App\Models\Reported;
use Illuminate\Support\Str;
use App\ReportRobot\FormMan;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class Robot
{
	// Protected Functions
    protected function gatePass()
    {	
        $mstadm = 901906;
        $adm = 203096;
		$user = 191;
		$au = Auth::user();

        if($au === null){ $accessLevel = 'notAllowed'; return $accessLevel; }
		if($au->level === 'null' || $au->level === '') { $accessLevel = 'notAllowed'; return $accessLevel; }
		if($au->level === $mstadm) { $accessLevel = 'MasterAdmin'; return $accessLevel; }
		if($au->level === $adm) { $accessLevel = 'Admin'; return $accessLevel; }
		if($au->level === $user) { $accessLevel = 'Users'; return $accessLevel; } 
    }

	protected function checkUserStatusIfVeried($email)
	{
		$status = User::where('email', $email)->first();
		return $status;
	}
	
	protected function saveNewCase($case)
	{
		Reported::insert(
			$case
		);
	}
	

	// PUBLIC FUNCTIONS Starts Here
	// Registration and Login Start
	public function checkIfUserAlreadyExistAsUser($email)
	{
		$check = User::where('email', $email)->first();
		if($check === [] || $check === null) { $status = 'No'; } else { $status = 'Yes'; }
		return $status;
	}

	public function checkUserIfExist($email)
	{
		$check = $this->checkUserStatusIfVeried($email);
		if($check === [] || $check === null) { $status = 'No'; } else { $status = 'Yes'; }
		return $status;
	}
	
	public function checkUserIfVeried($email)
	{
		return $this->checkUserStatusIfVeried($email);
	}
	
	public function updateNewUserEmailToken($email, $emailtoken)
	{
		User::where('email', $email)->update($emailtoken);
	}
	// Registration and Login End

	
	// Functions for Cases Starts
	public function getAllCases()
	{
		//return $cases = DB::table('reporteds')->paginate(3);

		$cases = DB::table('reporteds')->get();
		return $cases;
	}

	public function doesCaseExist($cc)
	{
		$case = DB::table('reporteds')->where('case_id', $cc)->get()->toArray();
		if($case === [] || $case === null) {
			$status = 'notValid';
		} else {
			$status = 'isValid';
		}
		return $status;
	}

	public function getCaseDetailsByCode($cc)
	{
		$case = DB::table('reporteds')->where('case_id', $cc)->get()->toArray();
		return $case;
	}

	public function getAccessLevel()
    { 
		$level = $this->gatePass();
        return $level;
    }

	public function validateCaseReportingRequest(Request $request)
    {
        return $validator = Validator::make($request->all(), [
        	'reporting' => 'required|string',
            'class' => 'required|string',
            'type' => 'required|string',
            'meeting_point' => 'required|string',
            'casesummary' => 'required',
            'casedetails' => 'required',
			'vPhone1' => 'required|string|size:11',
			'vGender' => 'required|string',
			'oGender' => 'required|string',
            'oFname' => 'required',
            'oPhone1' => 'required|string|size:11',
            'oAddress' => 'required',
            'oArea1' => 'required',
            'oCity' => 'required',
            'oState' => 'required',
            'oAddres_description' => 'required',
            'qna' => 'required',
            'no1' => 'required',
            'no2' => 'required',
			]
		);
    }

	function checkPostAnswer ($data1, $data2, $data3) 
	{ // $data1 = no1 (Que 1), $data2 = no2 (Que 2), $data3 = qna (Answer)
		$ans = $data1 + $data2;
		$answered = $data3;
		return intval($answered) === intval($ans);
	}

    public function getPostingRequestData($request)
    {
		$p = date("Y-m-d H:i:s"); $forman = new FormMan;
		$reporting = $forman->FormInput($request->input('reporting'));
		$class = $forman->FormInput($request->input('class'));
		$type = $forman->FormInput($request->input('type'));
		$meeting_point = $forman->FormInput($request->input('meeting_point'));
		$casesummary = $forman->FormInput($request->input('casesummary'));
		$casedetails = $forman->FormInput($request->input('casedetails'));
		$vPhone1 = $forman->FormInput($request->input('vPhone1'));
		if($request->toArray()['vPhone2'] === null){
			$vPhone2 = 0; 
		}else {
			$vPhone2 = $forman->FormInput($request->input('vPhone2'));
		}
		$vGender = $forman->FormInput($request->input('vGender'));
		if($request->toArray()['vWhatsapp'] === null){
			$vWhatsapp = 0; 
		}else {
			$vWhatsapp = $forman->FormInput($request->input('vWhatsapp'));
		}
		$vfacebook = $forman->FormInput($request->input('vfacebook'));
		$vinstagram = $forman->FormInput($request->input('vinstagram'));
		$vtwitter = $forman->FormInput($request->input('vtwitter'));
		$vyoutube = $forman->FormInput($request->input('vyoutube'));
		$oFname = $forman->FormInput($request->input('oFname'));
		$oNname = $forman->FormInput($request->input('oNname'));
		$oBname = $forman->FormInput($request->input('oBname'));
		$oEmail = $request->input('oEmail');
		$oPhone1 = $forman->FormInput($request->input('oPhone1'));
		if($request->toArray()['oPhone2'] === null){
			$oPhone2 = 0; 
		}else {
			$oPhone2 = $forman->FormInput($request->input('oPhone2'));
		}
		$oGender = $forman->FormInput($request->input('oGender'));
		if($request->toArray()['oWhatsapp'] === null){
			$oWhatsapp = 0; 
		}else {
			$oWhatsapp = $forman->FormInput($request->input('oWhatsapp'));
		}
		$ofacebook = $forman->FormInput($request->input('ofacebook'));
		$oinstagram = $forman->FormInput($request->input('oinstagram'));
		$otwitter = $forman->FormInput($request->input('otwitter'));
		$oyoutube = $forman->FormInput($request->input('oyoutube'));
		$oAddress = $forman->FormInput($request->input('oAddress'));
		$oArea1 = $forman->FormInput($request->input('oArea1'));
		$oArea2 = $forman->FormInput($request->input('oArea2'));
		$oCity = $forman->FormInput($request->input('oCity'));
		$oState = $forman->FormInput($request->input('oState'));
		$oAddres_description = $forman->FormInput($request->input('oAddres_description'));
		$qna = $forman->FormInput($request->input('qna'));
		$no1 = $forman->FormInput($request->input('no1'));
		$no2 = $forman->FormInput($request->input('no2'));

		$data = 
		[	
			'case_id' => 'ExpoRE'.Str::random(15),
			'reporting' => $reporting,
			'class' => $class,
			'type' => $type,
			'meeting_point' => $meeting_point,
			'casesummary' => $casesummary,
			'casedetails' => $casedetails,
			'vPhone1' => $vPhone1,
			'vGender' => $vGender,
			'vPhone2' => $vPhone2,
			'vWhatsapp' => $vWhatsapp,
			'vfacebook' => $vfacebook,
			'vinstagram' => $vinstagram,
			'vtwitter' => $vtwitter,
			'vyoutube' => $vyoutube,
			'oFname' => $oFname,
			'oNname' => $oNname,
			'oBname' => $oBname,
			'oEmail' => $oEmail,
			'oPhone1' => $oPhone1,
			'oGender' => $oGender,
			'oPhone2' => $oPhone2,
			'oWhatsapp' => $oWhatsapp,
			'ofacebook' => $ofacebook,
			'oinstagram' => $oinstagram,
			'otwitter' => $otwitter,
			'oyoutube' => $oyoutube,
			'oAddress' => $oAddress,
			'oArea1' => $oArea1,
			'oArea2' => $oArea2,
			'oCity' => $oCity,
			'oState' => $oState,
			'oAddres_description' => $oAddres_description,
			'qna' => $qna,
			'no1' => $no1,
			'no2' => $no2,
			'created_at' => $p,
		];
		return ($data);
	}

	public function doSaveCase($case)
	{
		$action = $this->saveNewCase($case);
		if(! $action) {
			$status = 'successful';
		} else {
			$status = 'unsuccessful';
		}
		return $status;
	}



}

?>